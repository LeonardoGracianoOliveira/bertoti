pasta1/EngenhariadeSoftware.txt

Comentário – Trecho 1:
O texto diferencia engenharia de software de programação e ciência da computação, destacando que o termo “engenharia” carrega a ideia de aplicação sistemática de conhecimentos teóricos para construir algo real, assim como em outras áreas da engenharia. Apesar de criar produtos menos tangíveis, a engenharia de software precisa adotar práticas mais rigorosas, já que o software está cada vez mais presente em aspectos críticos da vida cotidiana. O trecho também aponta que, historicamente, a programação não exigia padrões tão rigorosos, mas essa realidade precisa mudar para garantir confiabilidade.

Comentário – Trecho 2:
O trecho amplia a definição de engenharia de software, mostrando que ela vai além de escrever código — envolve ferramentas, processos e práticas que garantam que o código permaneça valioso ao longo do tempo. O conceito-chave apresentado é “programação integrada ao longo do tempo”, enfatizando a necessidade de pensar na sustentabilidade, manutenção e adaptação do código durante todo o seu ciclo de vida. O texto traz três princípios essenciais para guiar essa prática:
Tempo e Mudança – lidar com a inevitabilidade de alterações no código.
Escala e Crescimento – preparar-se para a evolução da organização e do software.
Compensações e Custos – tomar decisões conscientes, equilibrando benefícios e desvantagens.

Três exemplos de trade-offs (compensações) em Engenharia de Software:

Performance vs. Legibilidade do Código
Descrição: Código altamente otimizado pode ser mais rápido, mas menos compreensível e mais difícil de manter. Por outro lado, um código claro e bem estruturado pode ser mais lento em alguns casos.
Impacto: Melhor performance imediata vs. manutenção facilitada no longo prazo.

Tempo de Desenvolvimento vs. Qualidade do Produto
Descrição: Entregar rapidamente pode ser necessário para aproveitar uma oportunidade de mercado, mas isso pode significar abrir mão de testes ou refinamentos.
Impacto: Lançamento rápido vs. risco de bugs e necessidade de retrabalho.

Flexibilidade vs. Custo de Implementação
Descrição: Criar um sistema altamente flexível para suportar muitos cenários futuros aumenta o custo e a complexidade inicial. Desenvolver algo mais simples reduz custos, mas pode dificultar adaptações depois.
Impacto: Investimento inicial alto para evitar mudanças futuras vs. custo menor agora com possíveis gastos maiores no futuro.
